(set-logic QF_LIA)
(set-option :produce-models true)


(declare-const A Int)
(declare-const B Int)
(declare-const C Int)
(declare-const D Int)
(declare-const E Int)
(declare-const F Int)
(declare-const At Int)
(declare-const Bt Int)
(declare-const Ct Int)
(declare-const Dt Int)
(declare-const Et Int)
(declare-const Ft Int)
(declare-const End Int)


;(declare-fun A () Int)
(assert (>= A 0))
;(declare-fun At () Int)
(assert (= At 2))
;(declare-fun B () Int)
(assert (>= B 0))
;(declare-fun Bt () Int)
(assert (= Bt 1))
;(declare-fun C () Int)
(assert (>= C 0))
;(declare-fun Ct () Int)
(assert (= Ct 2))
;(declare-fun D () Int)
(assert (>= D 0))
;(declare-fun Dt () Int)
(assert (= Dt 2))
;(declare-fun E () Int)
(assert (>= E 0))
;(declare-fun Et () Int)
(assert (= Et 7))
;(declare-fun F () Int)
(assert (>= F 0))
;(declare-fun Ft () Int)
(assert (= Ft 5))
(assert (or (<= (+ A At) C) (<= (+ C Ct) A)))
(assert (or (<= (+ B Bt) D) (<= (+ D Dt) B)))
(assert (or (<= (+ B Bt) E) (<= (+ E Et) B)))
(assert (or (<= (+ D Dt) E) (<= (+ E Et) D)))
(assert (and (<= (+ D Dt) F) (<= (+ E Et) F)))
(assert (<= (+ A At) B))
;(declare-fun End () Int)
(assert (= End 14))
(assert (<= (+ A At) End))
(assert (<= (+ B Bt) End))
(assert (<= (+ C Ct) End))
(assert (<= (+ D Dt) End))
(assert (<= (+ E Et) End))
(assert (<= (+ F Ft) End))
(check-sat)
; (get-model) ; un-comment if you want to see details of the model
(get-value (A B)) (get-value (C D)) (get-value (E F))
